<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xsi:schemaLocation="
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">
    <!-- datasource -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:application.properties" />
    </bean>
    <!-- datasource -->
    <bean id="dataSource" class="com.jolbox.bonecp.BoneCPDataSource" destroy-method="close">
        <property name="maxConnectionsPerPartition" value="30" />
        <property name="minConnectionsPerPartition" value="10" />
        <property name="partitionCount" value="3" />
        <property name="acquireIncrement" value="5" />
        <property name="statementsCacheSize" value="100" />
        <property name="releaseHelperThreads" value="3" />

        <property name="driverClass" value="com.mysql.jdbc.Driver" />
        <property name="jdbcUrl" value="${spring.datasource.url}" />
        <property name="username" value="${spring.datasource.username}" />
        <property name="password" value="${spring.datasource.password}" />
    </bean>

    <!-- transactions -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true" />
            <tx:method name="insert*" rollback-for="Exception" />
            <tx:method name="add*" rollback-for="Exception" />
            <tx:method name="addOrUpdate*" rollback-for="Exception" />
            <tx:method name="del*" rollback-for="Exception" />
            <tx:method name="update*" rollback-for="Exception" />
        </tx:attributes>
    </tx:advice>
    <aop:config proxy-target-class="true">
        <aop:pointcut id="serviceMethod" expression="execution(* com.pepper.component.service.*Service.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethod" />
    </aop:config>

    <!-- ibatis-->
    <bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="sql-map-config.xml" />
    </bean>

    <!-- dao -->
    <bean id="releaseInfoDao" class="com.pepper.component.dao.impl.IOSReleaseInfoDaoImpl">
        <property name="sqlMapClient" ref="sqlMapClient" />
    </bean>
    <!-- service -->
    <bean id="releaseInfoService" class="com.pepper.component.service.IOSReleaseInfoService"></bean>

    <!-- <bean/> definitions here -->
    <bean id="saxophone" class="com.pepper.spring.pojo.Saxophone" />
    <bean id="piano" class="com.pepper.spring.pojo.Piano" />

    <bean id="david" class="com.pepper.spring.pojo.Instrumentalist" scope="prototype" autowire="byName">
        <property name="song" value="Jingle Bells" />
        <property name="instrument" ref="piano" />
    </bean>

    <!-- 
    <bean id="audienceAdvisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
        <property name="advice" ref="audienceAdvice" />
        <property name="pattern" value=".*perform" />
    </bean> -->
</beans>